//@version=6
indicator("Ultimate Trading System", overlay=true, max_boxes_count=500, max_lines_count=500, max_labels_count=500)

// ==================== 입력 파라미터 ====================
// 기본 설정
stopLossPercent = input.float(1.0, "손절 %", minval=0.1, maxval=5.0, group="기본")
rrRatio = input.float(2.0, "Risk:Reward", minval=1.0, maxval=5.0, group="기본")
volumeMultiplier = input.float(1.5, "Volume 배수", minval=1.0, maxval=3.0, group="기본")

// Order Block / FVG
obLookback = input.int(15, "Order Block 범위", minval=5, maxval=50, group="패턴")
showOB = input.bool(true, "Order Block 표시", group="패턴")
showFVG = input.bool(true, "FVG 표시", group="패턴")
maxBoxes = input.int(5, "최대 박스", minval=1, maxval=10, group="패턴")

// MSS
mssLookback = input.int(5, "MSS 범위", minval=3, maxval=20, group="패턴")

// EMA
ema5Length = input.int(5, "EMA 5", minval=1, group="EMA")
ema20Length = input.int(20, "EMA 20", minval=1, group="EMA")
ema60Length = input.int(60, "EMA 60", minval=1, group="EMA")
showEMA = input.bool(true, "EMA 표시", group="EMA")

// Squeeze
lengthBB = input.int(20, "BB Length", minval=1, group="Squeeze")
multBB = input.float(2.0, "BB Mult", minval=0.1, group="Squeeze")
lengthKC = input.int(20, "KC Length", minval=1, group="Squeeze")
multKC = input.float(1.5, "KC Mult", minval=0.1, group="Squeeze")

// Confluence (새로운 기능)
swingLookback = input.int(500, "Swing 범위", minval=100, maxval=2000, group="Confluence")
srLookback = input.int(300, "S/R 범위", minval=100, maxval=1000, group="Confluence")

// ==================== EMA 계산 ====================
ema5 = ta.ema(close, ema5Length)
ema20 = ta.ema(close, ema20Length)
ema60 = ta.ema(close, ema60Length)

plot(showEMA ? ema5 : na, "EMA 5", color=color.orange, linewidth=1)
plot(showEMA ? ema20 : na, "EMA 20", color=color.blue, linewidth=2)
plot(showEMA ? ema60 : na, "EMA 60", color=color.purple, linewidth=2)

emaBullish = close > ema5 and ema5 > ema20 and ema20 > ema60
emaBearish = close < ema5 and ema5 < ema20 and ema20 < ema60
nearEMA20 = math.abs(close - ema20) / close < 0.005

// ==================== 타임프레임 ====================
htf = timeframe.period == "1" or timeframe.period == "3" ? "5" :
      timeframe.period == "5" ? "15" :
      timeframe.period == "15" ? "60" : "240"

// ==================== 3TF 추세 ====================
currentTF_MA = ta.sma(close, 20)
htf1_MA = request.security(syminfo.tickerid, "5", ta.sma(close, 20), lookahead=barmerge.lookahead_off)
htf2_MA = request.security(syminfo.tickerid, "15", ta.sma(close, 20), lookahead=barmerge.lookahead_off)

trend3TF_Bullish = close > currentTF_MA and close > htf1_MA and close > htf2_MA
trend3TF_Bearish = close < currentTF_MA and close < htf1_MA and close < htf2_MA

bgcolor(trend3TF_Bullish ? color.new(color.green, 97) : trend3TF_Bearish ? color.new(color.red, 97) : na)

// ==================== VOLUME ====================
avgVolume = ta.sma(volume, 20)
highVolume = volume > avgVolume * volumeMultiplier

// ==================== MSS ====================
var float lastHigh = na
var float lastLow = na

pivotHigh = ta.pivothigh(high, mssLookback, mssLookback)
pivotLow = ta.pivotlow(low, mssLookback, mssLookback)

if not na(pivotHigh)
    lastHigh := high[mssLookback]

if not na(pivotLow)
    lastLow := low[mssLookback]

bullishMSS = (not na(lastLow)) and close > lastHigh and close[1] <= lastHigh
bearishMSS = (not na(lastHigh)) and close < lastLow and close[1] >= lastLow

plotshape(bullishMSS, "MSS↑", shape.labelup, location.belowbar, color.new(color.green, 30), size=size.tiny, text="MSS")
plotshape(bearishMSS, "MSS↓", shape.labeldown, location.abovebar, color.new(color.red, 30), size=size.tiny, text="MSS")

// ==================== ORDER BLOCK ====================
[htfO, htfH, htfL, htfC] = request.security(syminfo.tickerid, htf, [open, high, low, close], lookahead=barmerge.lookahead_off)

atrValue = ta.atr(14)
bullishMove = htfC > htfO and (htfC - htfO) > atrValue * 2.0
bearishMove = htfC < htfO and (htfO - htfC) > atrValue * 2.0

var bullishOBs = array.new<box>()
var bearishOBs = array.new<box>()

if bullishMove and showOB and bar_index > 1 and htfC[1] < htfO[1]
    obBox = box.new(bar_index[1], htfH[1], bar_index + 50, htfL[1], border_color=color.new(color.green, 50), bgcolor=color.new(color.green, 90), border_width=1)
    array.push(bullishOBs, obBox)
    if array.size(bullishOBs) > maxBoxes
        box.delete(array.shift(bullishOBs))

if bearishMove and showOB and bar_index > 1 and htfC[1] > htfO[1]
    obBox = box.new(bar_index[1], htfH[1], bar_index + 50, htfL[1], border_color=color.new(color.red, 50), bgcolor=color.new(color.red, 90), border_width=1)
    array.push(bearishOBs, obBox)
    if array.size(bearishOBs) > maxBoxes
        box.delete(array.shift(bearishOBs))

if array.size(bullishOBs) > 0
    for i = 0 to array.size(bullishOBs) - 1
        box.set_right(array.get(bullishOBs, i), bar_index + 50)

if array.size(bearishOBs) > 0
    for i = 0 to array.size(bearishOBs) - 1
        box.set_right(array.get(bearishOBs, i), bar_index + 50)

touchingBullishOB = false
touchingBearishOB = false

if array.size(bullishOBs) > 0
    for i = 0 to array.size(bullishOBs) - 1
        obBox = array.get(bullishOBs, i)
        if low <= box.get_top(obBox) and high >= box.get_bottom(obBox)
            touchingBullishOB := true

if array.size(bearishOBs) > 0
    for i = 0 to array.size(bearishOBs) - 1
        obBox = array.get(bearishOBs, i)
        if low <= box.get_top(obBox) and high >= box.get_bottom(obBox)
            touchingBearishOB := true

// ==================== FVG ====================
var bullishFVGs = array.new<box>()
var bearishFVGs = array.new<box>()

bullishFVG = showFVG and bar_index > 2 and high[2] < low and close > open
if bullishFVG
    fvgBox = box.new(bar_index[2], low, bar_index + 50, high[2], border_color=color.new(color.green, 70), bgcolor=color.new(color.green, 95), border_width=1, border_style=line.style_dashed)
    array.push(bullishFVGs, fvgBox)
    if array.size(bullishFVGs) > maxBoxes
        box.delete(array.shift(bullishFVGs))

bearishFVG = showFVG and bar_index > 2 and low[2] > high and close < open
if bearishFVG
    fvgBox = box.new(bar_index[2], low[2], bar_index + 50, high, border_color=color.new(color.red, 70), bgcolor=color.new(color.red, 95), border_width=1, border_style=line.style_dashed)
    array.push(bearishFVGs, fvgBox)
    if array.size(bearishFVGs) > maxBoxes
        box.delete(array.shift(bearishFVGs))

if array.size(bullishFVGs) > 0
    for i = 0 to array.size(bullishFVGs) - 1
        box.set_right(array.get(bullishFVGs, i), bar_index + 50)

if array.size(bearishFVGs) > 0
    for i = 0 to array.size(bearishFVGs) - 1
        box.set_right(array.get(bearishFVGs, i), bar_index + 50)

touchingBullishFVG = false
touchingBearishFVG = false

if array.size(bullishFVGs) > 0
    for i = 0 to array.size(bullishFVGs) - 1
        fvgBox = array.get(bullishFVGs, i)
        fvgTop = box.get_top(fvgBox)
        fvgBot = box.get_bottom(fvgBox)
        fvg50 = (fvgTop + fvgBot) / 2
        if low <= fvgTop and high >= fvg50
            touchingBullishFVG := true

if array.size(bearishFVGs) > 0
    for i = 0 to array.size(bearishFVGs) - 1
        fvgBox = array.get(bearishFVGs, i)
        fvgTop = box.get_top(fvgBox)
        fvgBot = box.get_bottom(fvgBox)
        fvg50 = (fvgTop + fvgBot) / 2
        if low <= fvg50 and high >= fvgBot
            touchingBearishFVG := true

// ==================== SQUEEZE ====================
basis = ta.sma(close, lengthBB)
dev = multBB * ta.stdev(close, lengthBB)
upperBB = basis + dev
lowerBB = basis - dev

ma = ta.sma(close, lengthKC)
range_1 = ta.tr
rangema = ta.sma(range_1, lengthKC)
upperKC = ma + rangema * multKC
lowerKC = ma - rangema * multKC

sqzOn = lowerBB > lowerKC and upperBB < upperKC
sqzOff = lowerBB < lowerKC and upperBB > upperKC
sqzNear = (upperBB - lowerBB) / (upperKC - lowerKC) < 0.9
squeezeRelease = (sqzOff or sqzNear) and sqzOn[1]

bgcolor(sqzOn ? color.new(color.red, 95) : sqzOff ? color.new(color.green, 95) : na)

// ==================== CONFLUENCE: Swing High/Low ====================
var float swingHigh = na
var float swingLow = na

if bar_index > swingLookback
    highestPrice = high[0]
    lowestPrice = low[0]
    for i = 1 to swingLookback
        if high[i] > highestPrice
            highestPrice := high[i]
        if low[i] < lowestPrice
            lowestPrice := low[i]
    swingHigh := highestPrice
    swingLow := lowestPrice

var line swingHighLine = na
var line swingLowLine = na

if not na(swingHigh) and bar_index % 10 == 0
    if not na(swingHighLine)
        line.delete(swingHighLine)
        line.delete(swingLowLine)
    swingHighLine := line.new(bar_index - 50, swingHigh, bar_index, swingHigh, color=color.new(color.red, 0), width=3, style=line.style_solid)
    swingLowLine := line.new(bar_index - 50, swingLow, bar_index, swingLow, color=color.new(color.green, 0), width=3, style=line.style_solid)

nearSwingHigh = not na(swingHigh) and math.abs(close - swingHigh) / close < 0.01
nearSwingLow = not na(swingLow) and math.abs(close - swingLow) / close < 0.01

// ==================== 점수 시스템 ====================
var int score = 0
score := 0

// 기본 요소
mssRecent = bullishMSS or bullishMSS[1] or bullishMSS[2] or bearishMSS or bearishMSS[1] or bearishMSS[2]
if mssRecent
    score := score + 25

if highVolume
    score := score + 20

if trend3TF_Bullish or trend3TF_Bearish
    score := score + 20

if touchingBullishOB or touchingBearishOB or touchingBullishFVG or touchingBearishFVG
    score := score + 15

if squeezeRelease
    score := score + 10

if emaBullish or emaBearish
    score := score + 15

if nearEMA20
    score := score + 10

// Confluence 추가 점수
if nearSwingHigh or nearSwingLow
    score := score + 40

// 심리적 가격 (00으로 끝남)
roundNumber = close % 1000 < 50 or close % 1000 > 950
if roundNumber
    score := score + 10

// ==================== 진입 신호 ====================
longCondition = (touchingBullishOB or touchingBullishFVG) and squeezeRelease and close > open and emaBullish and trend3TF_Bullish and highVolume and score >= 150

shortCondition = (touchingBearishOB or touchingBearishFVG) and squeezeRelease and close < open and emaBearish and trend3TF_Bearish and highVolume and score >= 150

isSplusLong = longCondition and score >= 180
isSlong = longCondition and score >= 150 and score < 180
isSplusShort = shortCondition and score >= 180
isSshort = shortCondition and score >= 150 and score < 180

plotshape(isSplusLong, "LONG S+", shape.triangleup, location.belowbar, color.new(color.lime, 0), size=size.huge)
plotshape(isSlong, "LONG S", shape.triangleup, location.belowbar, color.new(color.lime, 0), size=size.large)
plotshape(isSplusShort, "SHORT S+", shape.triangledown, location.abovebar, color.new(color.red, 0), size=size.huge)
plotshape(isSshort, "SHORT S", shape.triangledown, location.abovebar, color.new(color.red, 0), size=size.large)

// ==================== 목표/손절 라인 ====================
var line entryLine = na
var line stopLine = na
var line target1Line = na
var line target2Line = na
var label entryLabel = na
var label stopLabel = na
var label target1Label = na
var label target2Label = na
var label gradeLabel = na

if longCondition
    if not na(entryLine)
        line.delete(entryLine)
        line.delete(stopLine)
        line.delete(target1Line)
        line.delete(target2Line)
        label.delete(entryLabel)
        label.delete(stopLabel)
        label.delete(target1Label)
        label.delete(target2Label)
        label.delete(gradeLabel)
    
    entryPrice = close
    stopPrice = not na(swingLow) ? swingLow * 0.997 : entryPrice * (1 - stopLossPercent / 100)
    targetDist = entryPrice - stopPrice
    target1Price = entryPrice + targetDist * rrRatio / 2
    target2Price = entryPrice + targetDist * rrRatio
    
    entryLine := line.new(bar_index, entryPrice, bar_index + 10, entryPrice, color=color.black, width=2, style=line.style_solid)
    stopLine := line.new(bar_index, stopPrice, bar_index + 10, stopPrice, color=color.red, width=2, style=line.style_dashed)
    target1Line := line.new(bar_index, target1Price, bar_index + 10, target1Price, color=color.green, width=1, style=line.style_dotted)
    target2Line := line.new(bar_index, target2Price, bar_index + 10, target2Price, color=color.green, width=2, style=line.style_dashed)
    
    entryLabel := label.new(bar_index + 10, entryPrice, "진입: " + str.tostring(entryPrice, format.mintick), color=color.black, textcolor=color.white, style=label.style_label_left, size=size.normal)
    stopLabel := label.new(bar_index + 10, stopPrice, "손절: " + str.tostring(stopPrice, format.mintick), color=color.red, textcolor=color.white, style=label.style_label_left, size=size.small)
    target1Label := label.new(bar_index + 10, target1Price, "1차: " + str.tostring(target1Price, format.mintick), color=color.green, textcolor=color.white, style=label.style_label_left, size=size.small)
    target2Label := label.new(bar_index + 10, target2Price, "2차: " + str.tostring(target2Price, format.mintick), color=color.green, textcolor=color.white, style=label.style_label_left, size=size.small)
    
    gradeText = score >= 180 ? "S+" : "S"
    gradeLabel := label.new(bar_index, low, gradeText + "(" + str.tostring(score) + ")", color=color.new(color.lime, 30), textcolor=color.white, style=label.style_label_up, size=size.small)

if shortCondition
    if not na(entryLine)
        line.delete(entryLine)
        line.delete(stopLine)
        line.delete(target1Line)
        line.delete(target2Line)
        label.delete(entryLabel)
        label.delete(stopLabel)
        label.delete(target1Label)
        label.delete(target2Label)
        label.delete(gradeLabel)
    
    entryPrice = close
    stopPrice = not na(swingHigh) ? swingHigh * 1.003 : entryPrice * (1 + stopLossPercent / 100)
    targetDist = stopPrice - entryPrice
    target1Price = entryPrice - targetDist * rrRatio / 2
    target2Price = entryPrice - targetDist * rrRatio
    
    entryLine := line.new(bar_index, entryPrice, bar_index + 10, entryPrice, color=color.black, width=2, style=line.style_solid)
    stopLine := line.new(bar_index, stopPrice, bar_index + 10, stopPrice, color=color.red, width=2, style=line.style_dashed)
    target1Line := line.new(bar_index, target1Price, bar_index + 10, target1Price, color=color.green, width=1, style=line.style_dotted)
    target2Line := line.new(bar_index, target2Price, bar_index + 10, target2Price, color=color.green, width=2, style=line.style_dashed)
    
    entryLabel := label.new(bar_index + 10, entryPrice, "진입: " + str.tostring(entryPrice, format.mintick), color=color.black, textcolor=color.white, style=label.style_label_left, size=size.normal)
    stopLabel := label.new(bar_index + 10, stopPrice, "손절: " + str.tostring(stopPrice, format.mintick), color=color.red, textcolor=color.white, style=label.style_label_left, size=size.small)
    target1Label := label.new(bar_index + 10, target1Price, "1차: " + str.tostring(target1Price, format.mintick), color=color.green, textcolor=color.white, style=label.style_label_left, size=size.small)
    target2Label := label.new(bar_index + 10, target2Price, "2차: " + str.tostring(target2Price, format.mintick), color=color.green, textcolor=color.white, style=label.style_label_left, size=size.small)
    
    gradeText = score >= 180 ? "S+" : "S"
    gradeLabel := label.new(bar_index, high, gradeText + "(" + str.tostring(score) + ")", color=color.new(color.red, 30), textcolor=color.white, style=label.style_label_down, size=size.small)

// ==================== 테이블 ====================
var table infoTable = table.new(position.top_right, 2, 8, border_width=2, border_color=color.gray)

if barstate.islast
    gradeText = score >= 180 ? "S+" : score >= 150 ? "S" : score >= 120 ? "A" : "B"
    gradeColor = score >= 180 ? color.new(color.green, 0) : score >= 150 ? color.new(color.orange, 0) : score >= 120 ? color.new(color.yellow, 0) : color.new(color.gray, 0)
    
    table.cell(infoTable, 0, 0, "항목", text_color=color.white, bgcolor=color.gray)
    table.cell(infoTable, 1, 0, "상태", text_color=color.white, bgcolor=color.gray)
    
    table.cell(infoTable, 0, 1, "점수", text_color=color.white, bgcolor=color.gray)
    table.cell(infoTable, 1, 1, str.tostring(score) + "/220", text_color=color.white, bgcolor=gradeColor, text_size=size.large)
    
    table.cell(infoTable, 0, 2, "등급", text_color=color.white, bgcolor=color.gray)
    table.cell(infoTable, 1, 2, gradeText, text_color=color.white, bgcolor=gradeColor, text_size=size.large)
    
    trendText = trend3TF_Bullish ? "상승" : trend3TF_Bearish ? "하락" : "횡보"
    trendBgColor = trend3TF_Bullish ? color.new(color.green, 70) : trend3TF_Bearish ? color.new(color.red, 70) : color.new(color.gray, 70)
    table.cell(infoTable, 0, 3, "추세", text_color=color.white, bgcolor=color.gray)
    table.cell(infoTable, 1, 3, trendText, text_color=color.white, bgcolor=trendBgColor)
    
    emaText = emaBullish ? "정배열" : emaBearish ? "역배열" : "횡보"
    emaBgColor = emaBullish ? color.new(color.green, 70) : emaBearish ? color.new(color.red, 70) : color.new(color.gray, 70)
    table.cell(infoTable, 0, 4, "EMA", text_color=color.white, bgcolor=color.gray)
    table.cell(infoTable, 1, 4, emaText, text_color=color.white, bgcolor=emaBgColor)
    
    volText = highVolume ? "높음" : "보통"
    volBgColor = highVolume ? color.new(color.green, 70) : color.new(color.gray, 70)
    table.cell(infoTable, 0, 5, "Volume", text_color=color.white, bgcolor=color.gray)
    table.cell(infoTable, 1, 5, volText, text_color=color.white, bgcolor=volBgColor)
    
    swingText = nearSwingLow ? "Low 근처" : nearSwingHigh ? "High 근처" : "-"
    swingBgColor = (nearSwingLow or nearSwingHigh) ? color.new(color.green, 70) : color.new(color.gray, 70)
    table.cell(infoTable, 0, 6, "Swing", text_color=color.white, bgcolor=color.gray)
    table.cell(infoTable, 1, 6, swingText, text_color=color.white, bgcolor=swingBgColor)
    
    sqzText = sqzOn ? "압축" : sqzOff ? "해제" : "보통"
    sqzBgColor = sqzOn ? color.new(color.red, 70) : sqzOff ? color.new(color.green, 70) : color.new(color.gray, 70)
    table.cell(infoTable, 0, 7, "Squeeze", text_color=color.white, bgcolor=color.gray)
    table.cell(infoTable, 1, 7, sqzText, text_color=color.white, bgcolor=sqzBgColor)

// ==================== 알림 ====================
alertcondition(longCondition, "LONG", "LONG - {{ticker}} {{interval}}")
alertcondition(shortCondition, "SHORT", "SHORT - {{ticker}} {{interval}}")
alertcondition(squeezeRelease, "Squeeze", "Squeeze - {{ticker}}")
alertcondition(bullishMSS, "Bull MSS", "Bull MSS - {{ticker}}")
alertcondition(bearishMSS, "Bear MSS", "Bear MSS - {{ticker}}")
